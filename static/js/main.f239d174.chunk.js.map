{"version":3,"sources":["micro-bit/services/device-information.ts","micro-bit/promise-queue.ts","micro-bit/service-helper.ts","micro-bit/services/button.ts","micro-bit/event-dispatcher.ts","micro-bit/services/led.ts","micro-bit/services/temperature.ts","micro-bit/services/accelerometer.ts","micro-bit/services/magnetometer.ts","micro-bit/services/io-pin.ts","micro-bit/services/uart.ts","micro-bit/services/event.ts","micro-bit/services/dfu-control.ts","micro-bit/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DeviceInformationCharacteristic","PromiseQueue","concurrent","queue","running","this","promise","shift","fn","result","resolve","reject","pump","Promise","push","ServiceHelper","service","emitter","characteristics","uuid","getCharacteristics","find","characteristic","getCharacteristic","Error","add","a","readValue","value","writeValue","event","handler","startNotifications","on","emitterEvent","listenerCount","addEventListener","removeEventListener","DeviceInformationService","helper","info","readStringCharacteristic","modelNumber","serialNumber","firmwareRevision","hardwareRevision","manufacturer","getCharacteristicValue","view","buffer","slice","byteOffset","byteLength","String","fromCharCode","apply","Array","from","Uint8Array","undefined","ButtonCharacteristic","ButtonState","EventDispatcher","isEventListenerObject","listener","handleEvent","type","callback","eventOrType","detail","CustomEvent","EventEmitter","LedCharacteristic","ButtonService","handleListener","buttonAState","buttonAStateChangedHandler","bind","buttonBState","buttonBStateChangedHandler","getUint8","target","dispatchEvent","bluetoothService","init","TemperatureCharacteristic","LedService","text","encoded","encodeString","setCharacteristicValue","ledText","ledMatrixState","viewToLedMatrix","state","ledMatrixToView","scrollingDelay","getUint16","delay","DataView","ArrayBuffer","setUint16","length","i","charCodeAt","matrix","byteToBoolArray","byte","bools","reverse","setUint8","boolArrayToByte","reduce","bool","AccelerometerCharacteristic","TemperatureService","temperature","temperatureChangedHandler","getInt8","temperaturePeriod","frequency","MagnetometerCharacteristic","MagnetometerCalibration","AccelerometerService","accelerometerData","accelerometerDataChangedHandler","dataViewToAccelerometerData","accelerometerPeriod","x","getInt16","y","z","IoPinCharacteristic","MagnetometerService","magnetometerData","magnetometerDataChangedHandler","magnetometerBearing","magnetometerBearingChangedHandler","magnetometerCalibration","magnetometerCalibrationChangedHandler","dataViewToMagnetometerData","magnetometerPeriod","AD","IO","littleEndian","UartCharacteristic","IoPinService","pinData","pinDataChangedHandler","dataViewToPinData","data","pinDataToDataView","pinAdConfiguration","dataViewToConfig","config","configToDataView","pinIoConfiguration","pwmControlDataToDataView","pwmControl","pin","forEach","index","setUint32","period","EventCharacteristic","UartService","tx","receiveHandler","receiveTextHandler","rx","arrayData","split","map","e","numberArray","prototype","call","DfuCharacteristic","EventService","microBitEvent","eventHandler","microBitRequirements","microbitRequirementsChangedHandler","viewToMicrobitEvent","clientRequirements","clientEvent","microbitEvent","DfuControlService","dfuControl","ServiceBuilder","services","serviceClass","found","create","requestMicrobit","bluetooth","requestDevice","filters","namePrefix","optionalServices","device","getServices","gatt","connected","connect","getPrimaryServices","builder","createService","deviceInformationService","buttonService","ledService","temperatureService","accelerometerService","magnetometerService","uartService","eventService","dfuControlService","ioPinService","failure","msg","f","toFixed","padStart","log","canvas","print","accX","accY","accZ","magX","magY","magZ","btnA","btnB","bear","temp","innerText","context","getContext","middle","height","accPosX","magPosX","microbit","window","navigator","console","readDeviceInformation","setTemperaturePeriod","setMagnetometerPeriod","mag","Math","sqrt","fillStyle","clearRect","fillRect","width","setAccelerometerPeriod","alert","message","App","logRef","useRef","canvasRef","useState","setServices","onConnect","useCallback","current","then","onCalibrate","calibrate","className","onClick","disabled","ref","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f239d174.chunk.js","sourcesContent":["/*\n* micro:bit Web Bluetooth\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { ServiceHelper } from \"../service-helper\";\n\n/**\n * @hidden\n */\nexport enum DeviceInformationCharacteristic {\n    modelNumber = \"00002a24-0000-1000-8000-00805f9b34fb\",\n    serialNumber = \"00002a25-0000-1000-8000-00805f9b34fb\",\n    firmwareRevision = \"00002a26-0000-1000-8000-00805f9b34fb\",\n    hardwareRevision = \"00002a27-0000-1000-8000-00805f9b34fb\",\n    manufacturer = \"00002a29-0000-1000-8000-00805f9b34fb\"\n}\n\n/**\n * Device information structure\n */\nexport interface DeviceInformation {\n    /**\n     * Model Number\n     */\n    modelNumber?: string;\n    /**\n     * Serial Number\n     */\n    serialNumber?: string;\n    /**\n     * Firmware Revision\n     */\n    firmwareRevision?: string;\n    /**\n     * Hardware Revision\n     */\n    hardwareRevision?: string;\n    /**\n     * Manufacturer Name\n     */\n    manufacturer?: string;\n}\n\n/**\n * Device Information Service\n */\nexport class DeviceInformationService {\n\n    /**\n     * @hidden\n     */\n    public static uuid = \"0000180a-0000-1000-8000-00805f9b34fb\";\n\n    /**\n     * @hidden\n     */\n    public static async create(service: BluetoothRemoteGATTService): Promise<DeviceInformationService> {\n        return new DeviceInformationService(service);\n    }\n\n    private helper: ServiceHelper;\n\n    /**\n     * @hidden\n     */\n    constructor(service: BluetoothRemoteGATTService) {\n        this.helper = new ServiceHelper(service);\n    }\n\n    /**\n     * Read device information\n     */\n    public async readDeviceInformation(): Promise<DeviceInformation> {\n        const info: DeviceInformation = {};\n\n        const modelNumber = await this.readStringCharacteristic(DeviceInformationCharacteristic.modelNumber);\n        if (modelNumber) info.modelNumber = modelNumber;\n\n        const serialNumber = await this.readStringCharacteristic(DeviceInformationCharacteristic.serialNumber);\n        if (serialNumber) info.serialNumber = serialNumber;\n\n        const firmwareRevision = await this.readStringCharacteristic(DeviceInformationCharacteristic.firmwareRevision);\n        if (firmwareRevision) info.firmwareRevision = firmwareRevision;\n\n        const hardwareRevision = await this.readStringCharacteristic(DeviceInformationCharacteristic.hardwareRevision);\n        if (hardwareRevision) info.hardwareRevision = hardwareRevision;\n\n        const manufacturer = await this.readStringCharacteristic(DeviceInformationCharacteristic.manufacturer);\n        if (manufacturer) info.manufacturer = manufacturer;\n\n        return info;\n    }\n\n    private async readStringCharacteristic(uuid: BluetoothCharacteristicUUID): Promise<string | undefined> {\n        try {\n            const view = await this.helper.getCharacteristicValue(uuid);\n            const buffer = view.buffer.slice(view.byteOffset, view.byteOffset + view.byteLength);\n            return String.fromCharCode.apply(null, Array.from(new Uint8Array(buffer)));\n        } catch (_e) {\n            return undefined;\n        }\n    }\n}\n","/*\n* micro:bit Web Bluetooth\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n/**\n * @hidden\n */\ninterface QueuedPromise {\n    fn: () => Promise<any>;\n    resolve: (value?: any | PromiseLike<any> | undefined) => void;\n    reject: (reason?: any) => void;\n}\n\n/**\n * @hidden\n */\nexport class PromiseQueue {\n\n    private queue: QueuedPromise[] = [];\n    private running = 0;\n\n    constructor(private concurrent = 1) {\n    }\n\n    private async pump(): Promise<void> {\n        if (this.running >= this.concurrent) {\n            return;\n        }\n\n        const promise = this.queue.shift();\n\n        if (!promise) {\n            return;\n        }\n\n        this.running ++;\n\n        try {\n            const result = await promise.fn();\n            promise.resolve(result);\n        } catch (error) {\n            promise.reject(error);\n        }\n\n        this.running --;\n        return this.pump();\n    }\n\n    public add<T>(fn: () => Promise<T>): Promise<T> {\n        return new Promise((resolve, reject) => {\n            this.queue.push({\n                fn,\n                resolve,\n                reject\n            });\n\n            return this.pump();\n        });\n    }\n}\n","/*\n* micro:bit Web Bluetooth\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { PromiseQueue } from \"./promise-queue\";\n\n/**\n * @hidden\n */\nexport interface ServiceEventHandler {\n    characteristic: BluetoothCharacteristicUUID;\n    handler: (event: Event) => void;\n}\n\n/**\n * @hidden\n */\nexport class ServiceHelper {\n\n    private static queue = new PromiseQueue();\n\n    private characteristics?: BluetoothRemoteGATTCharacteristic[];\n\n    constructor(private service: BluetoothRemoteGATTService, private emitter?: any) {\n    }\n\n    private async getCharacteristic(uuid: BluetoothCharacteristicUUID): Promise<BluetoothRemoteGATTCharacteristic | undefined> {\n        if (!this.characteristics) {\n            this.characteristics = await this.service.getCharacteristics();\n        }\n\n        return this.characteristics.find(characteristic => characteristic.uuid === uuid);\n    }\n\n    public async getCharacteristicValue(uuid: BluetoothCharacteristicUUID): Promise<DataView> {\n        const characteristic = await this.getCharacteristic(uuid);\n\n        if (!characteristic) {\n            throw new Error(\"Unable to locate characteristic\");\n        }\n\n        return await ServiceHelper.queue.add(async () => characteristic.readValue());\n    }\n\n    public async setCharacteristicValue(uuid: BluetoothCharacteristicUUID, value: BufferSource): Promise<void> {\n        const characteristic = await this.getCharacteristic(uuid);\n\n        if (!characteristic) {\n            throw new Error(\"Unable to locate characteristic\");\n        }\n\n        await ServiceHelper.queue.add(async () => characteristic.writeValue(value));\n    }\n\n    public async handleListener(event: string, uuid: BluetoothCharacteristicUUID, handler: (event: Event) => void) {\n        const characteristic = await this.getCharacteristic(uuid);\n\n        if (!characteristic) {\n            return;\n        }\n\n        await ServiceHelper.queue.add(async () => characteristic.startNotifications());\n\n        this.emitter!.on(\"newListener\", (emitterEvent: string) => {\n            if (emitterEvent !== event || this.emitter!.listenerCount(event) > 0) {\n                return;\n            }\n\n            return ServiceHelper.queue.add(async () => characteristic.addEventListener(\"characteristicvaluechanged\", handler));\n        });\n\n        this.emitter!.on(\"removeListener\", (emitterEvent: string) => {\n            if (emitterEvent !== event || this.emitter!.listenerCount(event) > 0) {\n                return;\n            }\n\n            return ServiceHelper.queue.add(async () => characteristic.removeEventListener(\"characteristicvaluechanged\", handler));\n        });\n    }\n}\n","/*\n* micro:bit Web Bluetooth\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { EventDispatcher, TypedDispatcher } from \"../event-dispatcher\";\nimport { ServiceHelper } from \"../service-helper\";\n\n/**\n * @hidden\n */\nexport enum ButtonCharacteristic {\n    buttonAState = \"e95dda90-251d-470a-a062-fa1922dfa9a8\",\n    buttonBState = \"e95dda91-251d-470a-a062-fa1922dfa9a8\"\n}\n\n/**\n * Button state enum\n */\nexport enum ButtonState {\n    /**\n     * Button released\n     */\n    Release = 0,\n    /**\n     * Button pressed - short\n     */\n    ShortPress = 1,\n    /**\n     * Button pressed - long\n     */\n    LongPress = 2\n}\n\n/**\n * Events raised by the button service\n */\nexport interface ButtonEvents {\n    /**\n     * @hidden\n     */\n    newListener: keyof ButtonEvents;\n    /**\n     * @hidden\n     */\n    removeListener: keyof ButtonEvents;\n    /**\n     * Button A state changed event\n     */\n    buttonastatechanged: ButtonState;\n    /**\n     * Button B state changed event\n     */\n    buttonbstatechanged: ButtonState;\n}\n\n/**\n * Button Service\n */\nexport class ButtonService extends (EventDispatcher as new() => TypedDispatcher<ButtonEvents>) {\n\n    /**\n     * @hidden\n     */\n    public static uuid = \"e95d9882-251d-470a-a062-fa1922dfa9a8\";\n\n    /**\n     * @hidden\n     */\n    public static async create(service: BluetoothRemoteGATTService): Promise<ButtonService> {\n        const bluetoothService = new ButtonService(service);\n        await bluetoothService.init();\n        return bluetoothService;\n    }\n\n    private helper: ServiceHelper;\n\n    /**\n     * @hidden\n     */\n    constructor(service: BluetoothRemoteGATTService) {\n        super();\n        this.helper = new ServiceHelper(service, this as any);\n    }\n\n    private async init() {\n        await this.helper.handleListener(\"buttonastatechanged\", ButtonCharacteristic.buttonAState, this.buttonAStateChangedHandler.bind(this));\n        await this.helper.handleListener(\"buttonbstatechanged\", ButtonCharacteristic.buttonBState, this.buttonBStateChangedHandler.bind(this));\n    }\n\n    /**\n     * Read state of button A\n     */\n    public async readButtonAState(): Promise<ButtonState> {\n        const view = await this.helper.getCharacteristicValue(ButtonCharacteristic.buttonAState);\n        return view.getUint8(0);\n    }\n\n    /**\n     * Read state of button B\n     */\n    public async readButtonBState(): Promise<ButtonState> {\n        const view = await this.helper.getCharacteristicValue(ButtonCharacteristic.buttonBState);\n        return view.getUint8(0);\n    }\n\n    private buttonAStateChangedHandler(event: Event) {\n        const view = (event.target as BluetoothRemoteGATTCharacteristic).value!;\n        this.dispatchEvent(\"buttonastatechanged\", view.getUint8(0));\n    }\n\n    private buttonBStateChangedHandler(event: Event) {\n        const view = (event.target as BluetoothRemoteGATTCharacteristic).value!;\n        this.dispatchEvent(\"buttonbstatechanged\", view.getUint8(0));\n    }\n}\n","/*\n* micro:bit Web Bluetooth\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { EventEmitter } from \"events\";\n\n/**\n * @hidden\n */\nexport interface TypedDispatcher<T> {\n    addEventListener<K extends keyof T>(type: K, listener: (event: CustomEvent<T[K]>) => void): void;\n    removeEventListener<K extends keyof T>(type: K, callback: (event: CustomEvent<T[K]>) => void): void;\n    dispatchEvent(event: CustomEvent<T>): boolean;\n    dispatchEvent<K extends keyof T>(type: K, detail: T[K]): boolean;\n    addListener<K extends keyof T>(event: K, listener: (data: T[K]) => void): this;\n    on<K extends keyof T>(event: K, listener: (data: T[K]) => void): this;\n    once<K extends keyof T>(event: K, listener: (data: T[K]) => void): this;\n    prependListener<K extends keyof T>(event: K, listener: (data: T[K]) => void): this;\n    prependOnceListener<K extends keyof T>(event: K, listener: (data: T[K]) => void): this;\n    removeListener<K extends keyof T>(event: K, listener: (data: T[K]) => void): this;\n    removeAllListeners<K extends keyof T>(event?: K): this;\n    // tslint:disable-next-line:ban-types\n    listeners<K extends keyof T>(event: K): Function[];\n    emit<K extends keyof T>(event: K, data: T[K]): boolean;\n    // tslint:disable-next-line:array-type\n    eventNames<K extends keyof T>(): Array<K>;\n    listenerCount<K extends keyof T>(type: K): number;\n    setMaxListeners(n: number): this;\n    getMaxListeners(): number;\n}\n\n/**\n * @hidden\n */\nexport class EventDispatcher extends EventEmitter implements EventTarget {\n\n    private isEventListenerObject = (listener: EventListenerOrEventListenerObject): listener is EventListenerObject => (listener as EventListenerObject).handleEvent !== undefined;\n\n    public addEventListener(type: string, listener: EventListenerOrEventListenerObject | null) {\n        if (listener) {\n            const handler = this.isEventListenerObject(listener) ? listener.handleEvent : listener;\n            super.addListener(type, handler);\n        }\n    }\n\n    public removeEventListener(type: string, callback: EventListenerOrEventListenerObject | null) {\n        if (callback) {\n            const handler = this.isEventListenerObject(callback) ? callback.handleEvent : callback;\n            super.removeListener(type, handler);\n        }\n    }\n\n    public dispatchEvent(event: Event): boolean;\n    public dispatchEvent<T>(type: string, detail: T): boolean;\n    public dispatchEvent<T>(eventOrType: Event | string, detail?: T): boolean {\n        let event: Event;\n        if (typeof eventOrType === \"string\") {\n            event = new CustomEvent(eventOrType, {\n                detail\n            });\n        } else {\n            event = eventOrType;\n        }\n\n        return super.emit(event.type, event);\n    }\n}\n","/*\n* micro:bit Web Bluetooth\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { ServiceHelper } from \"../service-helper\";\n\n/**\n * @hidden\n */\nexport enum LedCharacteristic {\n    ledMatrixState = \"e95d7b77-251d-470a-a062-fa1922dfa9a8\",\n    ledText = \"e95d93ee-251d-470a-a062-fa1922dfa9a8\",\n    scrollingDelay = \"e95d0d2d-251d-470a-a062-fa1922dfa9a8\"\n}\n\n/**\n * LED matrix structure\n */\nexport type LedMatrix = [\n    [boolean, boolean, boolean, boolean, boolean],\n    [boolean, boolean, boolean, boolean, boolean],\n    [boolean, boolean, boolean, boolean, boolean],\n    [boolean, boolean, boolean, boolean, boolean],\n    [boolean, boolean, boolean, boolean, boolean]\n];\n\n/**\n * LED Service\n */\nexport class LedService {\n\n    /**\n     * @hidden\n     */\n    public static uuid = \"e95dd91d-251d-470a-a062-fa1922dfa9a8\";\n\n    /**\n     * @hidden\n     */\n    public static async create(service: BluetoothRemoteGATTService): Promise<LedService> {\n        return new LedService(service);\n    }\n\n    private helper: ServiceHelper;\n\n    /**\n     * @hidden\n     */\n    constructor(service: BluetoothRemoteGATTService) {\n        this.helper = new ServiceHelper(service);\n    }\n\n    /**\n     * Write text to the LED matrix\n     * @param text Te text to display\n     */\n    public async writeText(text: string): Promise<void> {\n        const encoded = this.encodeString(text);\n        return this.helper.setCharacteristicValue(LedCharacteristic.ledText, encoded);\n    }\n\n    /**\n     * Read matrix state\n     */\n    public async readMatrixState(): Promise<LedMatrix> {\n        const view = await this.helper.getCharacteristicValue(LedCharacteristic.ledMatrixState);\n        return this.viewToLedMatrix(view);\n    }\n\n    /**\n     * Write matrix state\n     * @param state The matrix data to set\n     */\n    public async writeMatrixState(state: LedMatrix): Promise<void> {\n        const view = this.ledMatrixToView(state);\n        return this.helper.setCharacteristicValue(LedCharacteristic.ledMatrixState, view);\n    }\n\n    /**\n     * Get scrolling delay\n     */\n    public async getScrollingDelay(): Promise<number> {\n        const view = await this.helper.getCharacteristicValue(LedCharacteristic.scrollingDelay);\n        return view.getUint16(0, true);\n    }\n\n    /**\n     * Set scrolling delay\n     * @param delay The delay to set (milliseconds)\n     */\n    public async setScrollingDelay(delay: number): Promise<void> {\n        const view = new DataView(new ArrayBuffer(2));\n        view.setUint16(0, delay, true);\n        return this.helper.setCharacteristicValue(LedCharacteristic.scrollingDelay, view);\n    }\n\n    private encodeString(text: string): ArrayBuffer {\n        const buffer = new ArrayBuffer(text.length);\n        const view = new Uint8Array(buffer);\n        for (let i = 0; i < text.length; i++) {\n            view[i] = text.charCodeAt(i);\n        }\n        return buffer;\n    }\n\n    private viewToLedMatrix(view: DataView): LedMatrix {\n        const matrix: boolean[][] = [];\n        for (let i = 0; i < 5; i ++) {\n            matrix[i] = this.byteToBoolArray(view.getUint8(i));\n        }\n        return matrix as LedMatrix;\n    }\n\n    private byteToBoolArray(byte: number): boolean[] {\n        const bools = [false, false, false, false, false];\n        for (let i = 0; i < bools.length; i++) {\n            bools[i] = (byte & 1) === 1;\n            byte >>= 1;\n        }\n        return bools.reverse();\n    }\n\n    private ledMatrixToView(matrix: LedMatrix): DataView {\n        const view = new DataView(new ArrayBuffer(5));\n        for (let i = 0; i < 5; i ++) {\n            view.setUint8(i, this.boolArrayToByte(matrix[i]));\n        }\n        return view;\n    }\n\n    private boolArrayToByte(bools: boolean[]): number {\n        return bools.reduce((byte, bool) => (byte << 1) | (bool ? 1 : 0), 0);\n    }\n}\n","/*\n* micro:bit Web Bluetooth\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { TypedDispatcher, EventDispatcher } from \"../event-dispatcher\";\nimport { ServiceHelper } from \"../service-helper\";\n\n/**\n * @hidden\n */\nexport enum TemperatureCharacteristic {\n    temperature = \"e95d9250-251d-470a-a062-fa1922dfa9a8\",\n    temperaturePeriod = \"e95d1b25-251d-470a-a062-fa1922dfa9a8\"\n}\n\n/**\n * Events raised by the temperature service\n */\nexport interface TemperatureEvents {\n    /**\n     * @hidden\n     */\n    newListener: keyof TemperatureEvents;\n    /**\n     * @hidden\n     */\n    removeListener: keyof TemperatureEvents;\n    /**\n     * Temperature changed event\n     */\n    temperaturechanged: number;\n}\n\n/**\n * Temperature Service\n */\nexport class TemperatureService extends (EventDispatcher as new() => TypedDispatcher<TemperatureEvents>) {\n\n    /**\n     * @hidden\n     */\n    public static uuid = \"e95d6100-251d-470a-a062-fa1922dfa9a8\";\n\n    /**\n     * @hidden\n     */\n    public static async create(service: BluetoothRemoteGATTService): Promise<TemperatureService> {\n        const bluetoothService = new TemperatureService(service);\n        await bluetoothService.init();\n        return bluetoothService;\n    }\n\n    private helper: ServiceHelper;\n\n    /**\n     * @hidden\n     */\n    constructor(service: BluetoothRemoteGATTService) {\n        super();\n        this.helper = new ServiceHelper(service, this);\n    }\n\n    private async init() {\n        await this.helper.handleListener(\"temperaturechanged\", TemperatureCharacteristic.temperature, this.temperatureChangedHandler.bind(this));\n    }\n\n    /**\n     * Read temperature\n     */\n    public async readTemperature(): Promise<number> {\n        const view = await this.helper.getCharacteristicValue(TemperatureCharacteristic.temperature);\n        return view.getInt8(0);\n    }\n\n    /**\n     * Get temperature sample period\n     */\n    public async getTemperaturePeriod(): Promise<number> {\n        const view = await this.helper.getCharacteristicValue(TemperatureCharacteristic.temperaturePeriod);\n        return view.getUint16(0, true);\n    }\n\n    /**\n     * Set temperature sample period\n     * @param frequency The frequency to use (milliseconds)\n     */\n    public async setTemperaturePeriod(frequency: number): Promise<void> {\n        const view = new DataView(new ArrayBuffer(2));\n        view.setUint16(0, frequency, true);\n        return await this.helper.setCharacteristicValue(TemperatureCharacteristic.temperaturePeriod, view);\n    }\n\n    private temperatureChangedHandler(event: Event) {\n        const view = (event.target as BluetoothRemoteGATTCharacteristic).value!;\n        this.dispatchEvent(\"temperaturechanged\", view.getInt8(0));\n    }\n}\n","/*\n* micro:bit Web Bluetooth\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { EventDispatcher, TypedDispatcher } from \"../event-dispatcher\";\nimport { ServiceHelper } from \"../service-helper\";\n\n/**\n * @hidden\n */\nexport enum AccelerometerCharacteristic {\n    accelerometerData = \"e95dca4b-251d-470a-a062-fa1922dfa9a8\",\n    accelerometerPeriod = \"e95dfb24-251d-470a-a062-fa1922dfa9a8\"\n}\n\n/**\n * Data received from the accelerometer\n */\nexport interface AccelerometerData {\n    /**\n     * Force in direction X\n     */\n    x: number;\n    /**\n     * Force in direction Y\n     */\n    y: number;\n    /**\n     * Force in direction Z\n     */\n    z: number;\n}\n\n/**\n * The sample period to read accelerometer data (milliseconds)\n */\nexport type AccelerometerPeriod = 1 | 2 | 5 | 10 | 20 | 80 | 160 | 640;\n\n/**\n * Events raised by the accelerometer service\n */\nexport interface AccelerometerEvents {\n    /**\n     * @hidden\n     */\n    newListener: keyof AccelerometerEvents;\n    /**\n     * @hidden\n     */\n    removeListener: keyof AccelerometerEvents;\n    /**\n     * Accelerometer data changed event\n     */\n    accelerometerdatachanged: AccelerometerData;\n}\n\n/**\n * Accelerometer Service\n */\nexport class AccelerometerService extends (EventDispatcher as new() => TypedDispatcher<AccelerometerEvents>) {\n\n    /**\n     * @hidden\n     */\n    public static uuid = \"e95d0753-251d-470a-a062-fa1922dfa9a8\";\n\n    /**\n     * @hidden\n     */\n    public static async create(service: BluetoothRemoteGATTService): Promise<AccelerometerService> {\n        const bluetoothService = new AccelerometerService(service);\n        await bluetoothService.init();\n        return bluetoothService;\n    }\n\n    private helper: ServiceHelper;\n\n    /**\n     * @hidden\n     */\n    constructor(service: BluetoothRemoteGATTService) {\n        super();\n        this.helper = new ServiceHelper(service, this as any);\n    }\n\n    private async init() {\n        await this.helper.handleListener(\"accelerometerdatachanged\", AccelerometerCharacteristic.accelerometerData, this.accelerometerDataChangedHandler.bind(this));\n    }\n\n    /**\n     * Read acceleromter data\n     */\n    public async readAccelerometerData(): Promise<AccelerometerData> {\n        const view = await this.helper.getCharacteristicValue(AccelerometerCharacteristic.accelerometerData);\n        return this.dataViewToAccelerometerData(view);\n    }\n\n    /**\n     * Get accelerometer sample period\n     */\n    public async getAccelerometerPeriod(): Promise<AccelerometerPeriod> {\n        const view = await this.helper.getCharacteristicValue(AccelerometerCharacteristic.accelerometerPeriod);\n        return view.getUint16(0, true) as AccelerometerPeriod;\n    }\n\n    /**\n     * Set accelerometer sample period\n     * @param frequency The frequency interval to use\n     */\n    public async setAccelerometerPeriod(frequency: AccelerometerPeriod): Promise<void> {\n        const view = new DataView(new ArrayBuffer(2));\n        view.setUint16(0, frequency, true);\n        return this.helper.setCharacteristicValue(AccelerometerCharacteristic.accelerometerPeriod, view);\n    }\n\n    private accelerometerDataChangedHandler(event: Event) {\n        const view = (event.target as BluetoothRemoteGATTCharacteristic).value!;\n        const value = this.dataViewToAccelerometerData(view);\n        this.dispatchEvent(\"accelerometerdatachanged\", value);\n    }\n\n    private dataViewToAccelerometerData(view: DataView): AccelerometerData {\n        return {\n            x: view.getInt16(0, true) / 1000.0,\n            y: view.getInt16(2, true) / 1000.0,\n            z: view.getInt16(4, true) / 1000.0\n        };\n    }\n}\n","/*\n* micro:bit Web Bluetooth\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { EventDispatcher, TypedDispatcher } from \"../event-dispatcher\";\nimport { ServiceHelper } from \"../service-helper\";\n\n/**\n * @hidden\n */\nexport enum MagnetometerCharacteristic {\n    magnetometerData = \"e95dfb11-251d-470a-a062-fa1922dfa9a8\",\n    magnetometerPeriod = \"e95d386c-251d-470a-a062-fa1922dfa9a8\",\n    magnetometerBearing = \"e95d9715-251d-470a-a062-fa1922dfa9a8\",\n    magnetometerCalibration = \"e95db358-251d-470a-a062-fa1922dfa9a8\"\n}\n\n/**\n * Data received from the magnetometer\n */\nexport interface MagnetometerData {\n    /**\n     * Force in direction X\n     */\n    x: number;\n    /**\n     * Force in direction Y\n     */\n    y: number;\n    /**\n     * Force in direction Z\n     */\n    z: number;\n}\n\n/**\n * Magnetometer calibation state\n */\nexport enum MagnetometerCalibration {\n    /**\n     * Unknown state\n     */\n    unknown = 0,\n    /**\n     * Calibration has been requestes\n     */\n    requested = 1,\n    /**\n     * Calibration completed\n     */\n    completed = 2,\n    /**\n     * Calibration had an error\n     */\n    errored = 3\n}\n\n/**\n * The sample period to read magnetometer data (milliseconds)\n */\nexport type MagnetometerPeriod = 1 | 2 | 5 | 10 | 20 | 80 | 160 | 640;\n\n/**\n * Events raised by the magnetometer service\n */\nexport interface MagnetometerEvents {\n    /**\n     * @hidden\n     */\n    newListener: keyof MagnetometerEvents;\n    /**\n     * @hidden\n     */\n    removeListener: keyof MagnetometerEvents;\n    /**\n     * Magnetometer data changed event\n     */\n    magnetometerdatachanged: MagnetometerData;\n    /**\n     * Magnetometer bearing changed event\n     */\n    magnetometerbearingchanged: number;\n    /**\n     * Magnetometer calibration changed event\n     */\n    magnetometercalibrationchanged: MagnetometerCalibration;\n}\n\n/**\n * Magnetometer Service\n */\nexport class MagnetometerService extends (EventDispatcher as new() => TypedDispatcher<MagnetometerEvents>) {\n\n    /**\n     * @hidden\n     */\n    public static uuid = \"e95df2d8-251d-470a-a062-fa1922dfa9a8\";\n\n    /**\n     * @hidden\n     */\n    public static async create(service: BluetoothRemoteGATTService): Promise<MagnetometerService> {\n        const bluetoothService = new MagnetometerService(service);\n        await bluetoothService.init();\n        return bluetoothService;\n    }\n\n    private helper: ServiceHelper;\n\n    /**\n     * @hidden\n     */\n    constructor(service: BluetoothRemoteGATTService) {\n        super();\n        this.helper = new ServiceHelper(service, this as any);\n    }\n\n    private async init() {\n        await this.helper.handleListener(\"magnetometerdatachanged\", MagnetometerCharacteristic.magnetometerData, this.magnetometerDataChangedHandler.bind(this));\n        await this.helper.handleListener(\"magnetometerbearingchanged\", MagnetometerCharacteristic.magnetometerBearing, this.magnetometerBearingChangedHandler.bind(this));\n        await this.helper.handleListener(\"magnetometercalibrationchanged\", MagnetometerCharacteristic.magnetometerCalibration, this.magnetometerCalibrationChangedHandler.bind(this));\n    }\n\n    /**\n     * Request magnetometer calibration\n     */\n    public async calibrate() {\n        return this.helper.setCharacteristicValue(MagnetometerCharacteristic.magnetometerCalibration, new Uint8Array([1]));\n    }\n\n    /**\n     * Read magnetometer data\n     */\n    public async readMagnetometerData(): Promise<MagnetometerData> {\n        const view = await this.helper.getCharacteristicValue(MagnetometerCharacteristic.magnetometerData);\n        return this.dataViewToMagnetometerData(view);\n    }\n\n    /**\n     * Read magnetometer bearing\n     */\n    public async readMagnetometerBearing(): Promise<number | undefined> {\n        const view = await this.helper.getCharacteristicValue(MagnetometerCharacteristic.magnetometerBearing);\n        if (view.byteLength === 2) {\n            return view.getUint16(0, true);\n        }\n        return undefined;\n    }\n\n    /**\n     * Get magnetometer sample period\n     */\n    public async getMagnetometerPeriod(): Promise<MagnetometerPeriod> {\n        const view = await this.helper.getCharacteristicValue(MagnetometerCharacteristic.magnetometerPeriod);\n        return view.getUint16(0, true) as MagnetometerPeriod;\n    }\n\n    /**\n     * Set magnetometer sample period\n     * @param frequency The frequency interval to use\n     */\n    public async setMagnetometerPeriod(frequency: MagnetometerPeriod): Promise<void> {\n        const view = new DataView(new ArrayBuffer(2));\n        view.setUint16(0, frequency, true);\n        return this.helper.setCharacteristicValue(MagnetometerCharacteristic.magnetometerPeriod, view);\n    }\n\n    private magnetometerDataChangedHandler(event: Event) {\n        const view = (event.target as BluetoothRemoteGATTCharacteristic).value!;\n        const value = this.dataViewToMagnetometerData(view);\n        this.dispatchEvent(\"magnetometerdatachanged\", value);\n    }\n\n    private magnetometerBearingChangedHandler(event: Event) {\n        const view = (event.target as BluetoothRemoteGATTCharacteristic).value!;\n        if (view.byteLength === 2) {\n            this.dispatchEvent(\"magnetometerbearingchanged\", view.getUint16(0, true));\n        }\n    }\n\n    private magnetometerCalibrationChangedHandler(event: Event) {\n        const view = (event.target as BluetoothRemoteGATTCharacteristic).value!;\n        if (view.byteLength === 1) {\n            this.dispatchEvent(\"magnetometercalibrationchanged\", view.getUint8(0) as MagnetometerCalibration);\n        }\n    }\n\n    private dataViewToMagnetometerData(view: DataView): MagnetometerData {\n        return {\n            x: view.getInt16(0, true),\n            y: view.getInt16(1, true),\n            z: view.getInt16(2, true)\n        };\n    }\n}\n","/*\n* micro:bit Web Bluetooth\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { ServiceHelper } from \"../service-helper\";\nimport { EventDispatcher, TypedDispatcher } from \"../event-dispatcher\";\n\n/**\n * @hidden\n */\nexport enum IoPinCharacteristic {\n    pinData = \"e95d8d00-251d-470a-a062-fa1922dfa9a8\",\n    pinAdConfiguration = \"e95d5899-251d-470a-a062-fa1922dfa9a8\",\n    pinIoConfiguration = \"e95db9fe-251d-470a-a062-fa1922dfa9a8\",\n    pwmControl = \"e95dd822-251d-470a-a062-fa1922dfa9a8\"\n}\n\nconst littleEndian = true;\n\n/**\n * Pin data\n */\nexport interface PinData {\n    /**\n     * Pin number\n     */\n    pin: number;\n    /**\n     * Pin value\n     */\n    value: number;\n}\n\n/**\n * PWM control data\n */\nexport interface PwmControlData {\n    /**\n     * Pin number\n     */\n    pin: number;\n    /**\n     * Pin value\n     */\n    value: number;\n    /**\n     * Period (in microseconds)\n     */\n    period: number;\n}\n\n/**\n * Analogue/Digital Enum\n */\nexport enum AD {\n    Digital = 0,\n    Analogue = 1\n}\n\n/**\n * Input/Output Enum\n */\nexport enum IO {\n    Output = 0,\n    Input = 1\n}\n\n/**\n * Events raised by the magnetometer service\n */\nexport interface IoPinEvents {\n    /**\n     * @hidden\n     */\n    newListener: keyof IoPinEvents;\n    /**\n     * @hidden\n     */\n    removeListener: keyof IoPinEvents;\n    /**\n     * Pin data changed event\n     */\n    pindatachanged: PinData[];\n}\n\n/**\n * @hidden\n */\nexport class IoPinService extends (EventDispatcher as new() => TypedDispatcher<IoPinEvents>) {\n\n    /**\n     * @hidden\n     */\n    public static uuid = \"e95d127b-251d-470a-a062-fa1922dfa9a8\";\n\n    /**\n     * @hidden\n     */\n    public static async create(service: BluetoothRemoteGATTService): Promise<IoPinService> {\n        const bluetoothService = new IoPinService(service);\n        await bluetoothService.init();\n        return bluetoothService;\n    }\n\n    /**\n     * @hidden\n     */\n    public helper: ServiceHelper;\n\n    /**\n     * @hidden\n     */\n    constructor(service: BluetoothRemoteGATTService) {\n        super();\n        this.helper = new ServiceHelper(service, this as any);\n    }\n\n    private async init() {\n        await this.helper.handleListener(\"pindatachanged\", IoPinCharacteristic.pinData, this.pinDataChangedHandler.bind(this));\n    }\n\n    /**\n     * Read pin data\n     */\n    public async readPinData(): Promise<PinData[]> {\n        const view = await this.helper.getCharacteristicValue(IoPinCharacteristic.pinData);\n        return this.dataViewToPinData(view);\n    }\n\n    /**\n     * Write pin data\n     * @param data The pin data to write\n     */\n    public async writePinData(data: PinData[]): Promise<void> {\n        const view = this.pinDataToDataView(data);\n        return this.helper.setCharacteristicValue(IoPinCharacteristic.pinData, view);\n    }\n\n    /**\n     * Get pin analogue/digital configuration\n     */\n    public async getAdConfiguration(): Promise<AD[]> {\n        const view = await this.helper.getCharacteristicValue(IoPinCharacteristic.pinAdConfiguration);\n        return this.dataViewToConfig(view);\n    }\n\n    /**\n     * Set pin analogue/digital configuration\n     * @param config The analogue/digital configuration to set\n     */\n    public async setAdConfiguration(config: AD[]): Promise<void> {\n        const view = this.configToDataView(config);\n        return this.helper.setCharacteristicValue(IoPinCharacteristic.pinAdConfiguration, view);\n    }\n\n    /**\n     * Get pin input/output configuration\n     */\n    public async getIoConfiguration(): Promise<IO[]> {\n        const view = await this.helper.getCharacteristicValue(IoPinCharacteristic.pinIoConfiguration);\n        return this.dataViewToConfig(view);\n    }\n\n    /**\n     * Set pin input/output configuration\n     * @param config The input/output configuration to set\n     */\n    public async setIoConfiguration(config: IO[]): Promise<void> {\n        const view = this.configToDataView(config);\n        return this.helper.setCharacteristicValue(IoPinCharacteristic.pinIoConfiguration, view);\n    }\n\n    /**\n     * Set pin PWM control\n     * @param data The PWM control data to set\n     */\n    public async setPwmControl(data: PwmControlData): Promise<void> {\n        const view = this.pwmControlDataToDataView(data);\n        return this.helper.setCharacteristicValue(IoPinCharacteristic.pwmControl, view);\n    }\n\n    private pinDataChangedHandler(event: Event) {\n        const view = (event.target as BluetoothRemoteGATTCharacteristic).value!;\n        const value = this.dataViewToPinData(view);\n        this.dispatchEvent(\"pindatachanged\", value);\n    }\n\n    private dataViewToPinData(view: DataView): PinData[] {\n        const data = [];\n        for (let i = 0; i < view.byteLength; i += 2) {\n            data.push({\n                pin: view.getUint8(i),\n                value: view.getUint8(i + 1)\n            });\n        }\n        return data;\n    }\n\n    private pinDataToDataView(data: PinData[]): DataView {\n        const view = new DataView(new ArrayBuffer(data.length * 2));\n        data.forEach((pinData, index) => {\n            view.setUint8(index * 2, pinData.pin);\n            view.setUint8(index * 2 + 1, pinData.value);\n        });\n        return view;\n    }\n\n    private dataViewToConfig(view: DataView): number[] {\n        const result: number[] = [];\n        const value = (view.getUint16(0) << 8) + view.getUint8(2);\n\n        for (let i = 0; i < 24; i++) {\n            result.push(value >> i);\n        }\n\n        return result;\n    }\n\n    private configToDataView(config: number[]): DataView {\n        const view = new DataView(new ArrayBuffer(3));\n        let value = 0;\n\n        // tslint:disable-next-line:prefer-for-of\n        for (let i = 0; i < config.length; i++) {\n            value &= 1 << config[i];\n        }\n\n        view.setUint16(0, value >> 8, littleEndian);\n        view.setUint8(2, value & 0xff);\n        return view;\n    }\n\n    private pwmControlDataToDataView(data: PwmControlData): DataView {\n        const view = new DataView(new ArrayBuffer(7));\n        view.setUint8(0, data.pin);\n        view.setUint16(1, data.value, littleEndian);\n        view.setUint32(3, data.period, littleEndian);\n        return view;\n    }\n}\n","/*\n* micro:bit Web Bluetooth\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { EventDispatcher, TypedDispatcher } from \"../event-dispatcher\";\nimport { ServiceHelper } from \"../service-helper\";\n\n/**\n * @hidden\n */\nexport enum UartCharacteristic {\n    tx = \"6e400002-b5a3-f393-e0a9-e50e24dcca9e\",\n    rx = \"6e400003-b5a3-f393-e0a9-e50e24dcca9e\"\n}\n\n/**\n * Events raised by the UART service\n */\nexport interface UartEvents {\n    /**\n     * @hidden\n     */\n    newListener: keyof UartEvents;\n    /**\n     * @hidden\n     */\n    removeListener: keyof UartEvents;\n    /**\n     * Serial data received event\n     */\n    receive: Uint8Array;\n    /**\n     * Serial received text event\n     */\n    receiveText: string;\n}\n\n/**\n * UART Service\n */\nexport class UartService extends (EventDispatcher as new() => TypedDispatcher<UartEvents>) {\n\n    /**\n     * @hidden\n     */\n    public static uuid = \"6e400001-b5a3-f393-e0a9-e50e24dcca9e\";\n\n    /**\n     * @hidden\n     */\n    public static async create(service: BluetoothRemoteGATTService): Promise<UartService> {\n        const bluetoothService = new UartService(service);\n        await bluetoothService.init();\n        return bluetoothService;\n    }\n\n    private helper: ServiceHelper;\n\n    /**\n     * @hidden\n     */\n    constructor(service: BluetoothRemoteGATTService) {\n        super();\n        this.helper = new ServiceHelper(service, this);\n    }\n\n    private async init() {\n        await this.helper.handleListener(\"receive\", UartCharacteristic.tx, this.receiveHandler.bind(this));\n        await this.helper.handleListener(\"receiveText\", UartCharacteristic.tx, this.receiveTextHandler.bind(this));\n    }\n\n    /**\n     * Send serial data\n     * @param value The buffer to send\n     */\n    public async send(value: BufferSource): Promise<void> {\n        return this.helper.setCharacteristicValue(UartCharacteristic.rx, value);\n    }\n\n    /**\n     * Send serial text\n     * @param value The text to send\n     */\n    public async sendText(value: string): Promise<void> {\n        const arrayData = value.split(\"\").map((e: string) => e.charCodeAt(0));\n        return this.helper.setCharacteristicValue(UartCharacteristic.rx, new Uint8Array(arrayData).buffer);\n    }\n\n    private receiveHandler(event: Event) {\n        const view = (event.target as BluetoothRemoteGATTCharacteristic).value!;\n        const value = new Uint8Array(view.buffer);\n        this.dispatchEvent(\"receive\", value);\n    }\n\n    private receiveTextHandler(event: Event) {\n        const view = (event.target as BluetoothRemoteGATTCharacteristic).value!;\n        const numberArray = Array.prototype.slice.call(new Uint8Array(view.buffer));\n        const value = String.fromCharCode.apply(null, numberArray);\n        this.dispatchEvent(\"receiveText\", value);\n    }\n}\n","/*\n* micro:bit Web Bluetooth\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { EventDispatcher, TypedDispatcher } from \"../event-dispatcher\";\nimport { ServiceHelper } from \"../service-helper\";\n\n/**\n * @hidden\n */\nexport enum EventCharacteristic {\n    microBitRequirements = \"e95db84c-251d-470a-a062-fa1922dfa9a8\",\n    microBitEvent = \"e95d9775-251d-470a-a062-fa1922dfa9a8\",\n    clientRequirements = \"e95d23c4-251d-470a-a062-fa1922dfa9a8\",\n    clientEvent = \"e95d5404-251d-470a-a062-fa1922dfa9a8\"\n}\n\n/**\n * micro:bit event\n */\nexport interface MicrobitEvent {\n    /**\n     * The type of event\n     */\n    type: number;\n    /**\n     * The value for the event\n     */\n    value: number;\n}\n\n/**\n * Events raised by the event service\n */\nexport interface MicrobitEvents {\n    /**\n     * @hidden\n     */\n    newListener: keyof MicrobitEvents;\n    /**\n     * @hidden\n     */\n    removeListener: keyof MicrobitEvents;\n    /**\n     * micro:bit requirements changed event\n     */\n    microbitrequirementschanged: MicrobitEvent;\n    /**\n     * micro:bit event event\n     */\n    microbitevent: MicrobitEvent;\n}\n\n/**\n * Event Service\n */\nexport class EventService extends (EventDispatcher as new() => TypedDispatcher<MicrobitEvents>) {\n\n    /**\n     * @hidden\n     */\n    public static uuid = \"e95d93af-251d-470a-a062-fa1922dfa9a8\";\n\n    /**\n     * @hidden\n     */\n    public static async create(service: BluetoothRemoteGATTService): Promise<EventService> {\n        const bluetoothService = new EventService(service);\n        await bluetoothService.init();\n        return bluetoothService;\n    }\n\n    private helper: ServiceHelper;\n\n    /**\n     * @hidden\n     */\n    constructor(service: BluetoothRemoteGATTService) {\n        super();\n        this.helper = new ServiceHelper(service, this as any);\n    }\n\n    private async init() {\n        await this.helper.handleListener(\"microbitevent\", EventCharacteristic.microBitEvent, this.eventHandler.bind(this));\n        await this.helper.handleListener(\"microbitrequirementschanged\", EventCharacteristic.microBitRequirements, this.microbitRequirementsChangedHandler.bind(this));\n    }\n\n    /**\n     * Get micro:bit event requirements\n     */\n    public async getMicrobitRequirements(): Promise<MicrobitEvent> {\n        const view = await this.helper.getCharacteristicValue(EventCharacteristic.microBitRequirements);\n        return this.viewToMicrobitEvent(view);\n    }\n\n    /**\n     * Set client event requirements\n     * @param type The type of event to set\n     * @param value The value to set\n     */\n    public async setClientRequirements(type: number, value: number): Promise<void> {\n        const view = new DataView(new ArrayBuffer(4));\n        view.setUint16(0, type, true);\n        view.setUint16(1, value, true);\n        return await this.helper.setCharacteristicValue(EventCharacteristic.clientRequirements, view);\n    }\n\n    /**\n     * Read micro:bit event\n     */\n    public async readMicrobitEvent(): Promise<MicrobitEvent> {\n        const view = await this.helper.getCharacteristicValue(EventCharacteristic.microBitEvent);\n        return this.viewToMicrobitEvent(view);\n    }\n\n    /**\n     * Write client event\n     * @param type The event type\n     * @param value The event value\n     */\n    public async writeClientEvent(type: number, value: number): Promise<void> {\n        const view = new DataView(new ArrayBuffer(4));\n        view.setUint16(0, type, true);\n        view.setUint16(1, value, true);\n        return await this.helper.setCharacteristicValue(EventCharacteristic.clientEvent, view);\n    }\n\n    private microbitRequirementsChangedHandler(event: Event) {\n        const view = (event.target as BluetoothRemoteGATTCharacteristic).value!;\n        const microbitEvent = this.viewToMicrobitEvent(view);\n        this.dispatchEvent(\"microbitrequirementschanged\", microbitEvent);\n    }\n\n    private eventHandler(event: Event) {\n        const view = (event.target as BluetoothRemoteGATTCharacteristic).value!;\n        const microbitEvent = this.viewToMicrobitEvent(view);\n        this.dispatchEvent(\"microbitevent\", microbitEvent);\n    }\n\n    private viewToMicrobitEvent(view: DataView): MicrobitEvent {\n        const type = view.getUint16(0, true);\n        const value = view.getUint16(1, true);\n        return {\n            type,\n            value\n        };\n    }\n}\n","/*\n* micro:bit Web Bluetooth\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { ServiceHelper } from \"../service-helper\";\n\n/**\n * @hidden\n */\nexport enum DfuCharacteristic {\n    dfuControl = \"e95d93b1-251d-470a-a062-fa1922dfa9a8\"\n}\n\n/**\n * @hidden\n */\nexport class DfuControlService {\n\n    /**\n     * @hidden\n     */\n    public static uuid = \"e95d93b0-251d-470a-a062-fa1922dfa9a8\";\n\n    /**\n     * @hidden\n     */\n    public static async create(service: BluetoothRemoteGATTService): Promise<DfuControlService> {\n        return new DfuControlService(service);\n    }\n\n    /**\n     * @hidden\n     */\n    public helper: ServiceHelper;\n\n    /**\n     * @hidden\n     */\n    constructor(service: BluetoothRemoteGATTService) {\n        this.helper = new ServiceHelper(service);\n    }\n\n    /**\n     * Request device switches to DFU mode\n     */\n    public requestDfu(): Promise<void> {\n        return this.helper.setCharacteristicValue(DfuCharacteristic.dfuControl, new Uint8Array([1]));\n    }\n\n    /**\n     * Request flash code\n     */\n    public requestFlashCode(): Promise<void> {\n        return this.helper.setCharacteristicValue(DfuCharacteristic.dfuControl, new Uint8Array([2]));\n    }\n}\n","/*\n* micro:bit Web Bluetooth\n* Copyright (c) 2019 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { DeviceInformationService } from \"./services/device-information\";\nimport { ButtonService } from \"./services/button\";\nimport { LedService } from \"./services/led\";\nimport { TemperatureService } from \"./services/temperature\";\nimport { AccelerometerService } from \"./services/accelerometer\";\nimport { MagnetometerService } from \"./services/magnetometer\";\nimport { IoPinService } from \"./services/io-pin\";\nimport { UartService } from \"./services/uart\";\nimport { EventService } from \"./services/event\";\nimport { DfuControlService } from \"./services/dfu-control\";\n\nexport interface Services {\n    deviceInformationService?: DeviceInformationService;\n    buttonService?: ButtonService;\n    ledService?: LedService;\n    temperatureService?: TemperatureService;\n    accelerometerService?: AccelerometerService;\n    magnetometerService?: MagnetometerService;\n    uartService?: UartService;\n    eventService?: EventService;\n    dfuControlService?: DfuControlService;\n    ioPinService?: IoPinService;\n}\n\n/**\n * @hidden\n */\ninterface Service {\n    uuid: BluetoothCharacteristicUUID;\n    create(service: BluetoothRemoteGATTService): Promise<any>;\n}\n\n/**\n * @hidden\n */\nclass ServiceBuilder {\n\n    constructor(private services: BluetoothRemoteGATTService[]) {\n    }\n\n    public async createService<T>(serviceClass: (new (service: BluetoothRemoteGATTService) => T) & Service): Promise<T | undefined> {\n        const found = this.services.find(service => service.uuid === serviceClass.uuid);\n\n        if (!found) {\n            return undefined;\n        }\n\n        return await serviceClass.create(found);\n    }\n}\n\nexport const requestMicrobit = async (bluetooth: Bluetooth): Promise<BluetoothDevice | undefined> => {\n    const device = await bluetooth.requestDevice({\n        filters: [\n            {\n                namePrefix: \"BBC micro:bit\"\n            }\n        ],\n        optionalServices: [\n            DeviceInformationService.uuid,\n            ButtonService.uuid,\n            LedService.uuid,\n            TemperatureService.uuid,\n            AccelerometerService.uuid,\n            MagnetometerService.uuid,\n            IoPinService.uuid,\n            UartService.uuid,\n            EventService.uuid,\n            DfuControlService.uuid\n        ]\n    });\n\n    return device;\n};\n\nexport const getServices = async (device: BluetoothDevice): Promise<Services> => {\n    if (!device || !device.gatt) {\n        return {};\n    }\n\n    if (!device.gatt.connected) {\n        await device.gatt.connect();\n    }\n\n    const services = await device.gatt.getPrimaryServices();\n    const builder = new ServiceBuilder(services);\n\n    const deviceInformationService = await builder.createService(DeviceInformationService);\n    const buttonService = await builder.createService(ButtonService);\n    const ledService = await builder.createService(LedService);\n    const temperatureService = await builder.createService(TemperatureService);\n    const accelerometerService = await builder.createService(AccelerometerService);\n    const magnetometerService = await builder.createService(MagnetometerService);\n    const uartService = await builder.createService(UartService);\n    const eventService = await builder.createService(EventService);\n    const dfuControlService = await builder.createService(DfuControlService);\n    const ioPinService = await builder.createService(IoPinService);\n\n    return {\n        deviceInformationService,\n        buttonService,\n        ledService,\n        temperatureService,\n        accelerometerService,\n        magnetometerService,\n        uartService,\n        eventService,\n        dfuControlService,\n        ioPinService\n    };\n};\n","import { useCallback, useRef, useState } from \"react\";\nimport './App.css';\nimport * as microbit from \"./micro-bit\";\n\nfunction failure(msg: string): never {\n  throw new Error(msg);\n}\n\nfunction f(x: number) {\n  return x.toFixed(2).padStart(6, \" \");\n}\n\ninterface State {\n  accX: number;\n  accY: number;\n  accZ: number;\n  magX: number;\n  magY: number;\n  magZ: number;\n  bear: number;\n  temp: number;\n  btnA: number;\n  btnB: number;\n}\n\nasync function connect(log: HTMLElement, canvas: HTMLCanvasElement) {\n  const state: State = {\n    accX: 0,\n    accY: 0,\n    accZ: 0,\n    magX: 0,\n    magY: 0,\n    magZ: 0,\n    bear: 0,\n    temp: 0,\n    btnA: 0,\n    btnB: 0,\n  };\n\n  const context = canvas.getContext(\"2d\")!;\n  const middle = canvas.height / 2;\n  let accPosX = 0;\n  let magPosX = 0;\n\n  function print() {\n    const { accX, accY, accZ, magX, magY, magZ, btnA, btnB, bear, temp } = state;\n    return log.innerText = `A:(${f(accX)}, ${f(accY)}, ${f(accZ)}) M:(${f(magX)}, ${f(magY)}, ${f(magZ)}) C:${bear} T:${temp} B:(${btnA}, ${btnB})`;\n  }\n\n  try {\n    const device = await microbit.requestMicrobit(window.navigator.bluetooth) ?? failure(\"requestMicrobit failed\");\n    const services = await microbit.getServices(device);\n    console.log(services);\n    const info = await services.deviceInformationService?.readDeviceInformation();\n    console.log(info);\n    services.temperatureService?.setTemperaturePeriod(200);\n    services.temperatureService?.addEventListener(\"temperaturechanged\", e => {\n      state.temp = e.detail;\n      print();\n    });\n    services.magnetometerService?.setMagnetometerPeriod(20);\n    services.magnetometerService?.addEventListener(\"magnetometerdatachanged\", e => {\n      let { x, y, z } = e.detail;\n      x /= 100000;\n      y /= 100000;\n      z /= 100000;\n      state.magX = x;\n      state.magY = y;\n      state.magZ = z;\n      print();\n\n      const mag = Math.sqrt(x * x + y * y + z * z) * canvas.height / 10;\n      context.fillStyle = \"green\";\n      context.clearRect(magPosX, 0, 3, middle);\n      context.fillRect(magPosX, middle - mag, 2, mag);\n      magPosX = (magPosX + 2) % canvas.width;\n    });\n    services.magnetometerService?.addEventListener(\"magnetometerbearingchanged\", e => {\n      state.bear = e.detail;\n      print();\n    });\n    services.accelerometerService?.setAccelerometerPeriod(20);\n    services.accelerometerService?.addEventListener(\"accelerometerdatachanged\", e => {\n      const { x, y, z } = e.detail;\n      state.accX = x;\n      state.accY = y;\n      state.accZ = z;\n      print();\n\n      const mag = Math.sqrt(x * x + y * y + z * z) * canvas.height / 10;\n      context.fillStyle = \"red\";\n      context.clearRect(accPosX, middle, 3, middle);\n      context.fillRect(accPosX, middle, 2, mag);\n      accPosX = (accPosX + 2) % canvas.width;\n    });\n    services.buttonService?.addEventListener(\"buttonastatechanged\", e => {\n      state.btnA = e.detail;\n      print();\n    });\n    services.buttonService?.addEventListener(\"buttonbstatechanged\", e => {\n      state.btnB = e.detail;\n      print();\n    });\n    // services.magnetometerService?.addEventListener(\"magnetometerdatachanged\", e => {\n    //   const {x,y,z} = e.detail;\n    //   return log.innerText = `(${f(x)}, ${f(y)}, ${f(z)})`;\n    // });\n    return services;\n  } catch (err) {\n    alert(err.message || err);\n    return null;\n  }\n}\n\nexport default function App() {\n  const logRef = useRef<HTMLPreElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  const [services, setServices] = useState<microbit.Services | null>(null);\n\n  const onConnect = useCallback(() => {\n    if (logRef.current && canvasRef.current) {\n      connect(logRef.current, canvasRef.current).then(setServices);\n    }\n  }, []);\n\n  const onCalibrate = useCallback(() => {\n    if (services?.magnetometerService) {\n      services?.magnetometerService?.calibrate();\n    }\n  }, [services?.magnetometerService]);\n\n  return (\n    <div className=\"App\">\n      <button onClick={onConnect}>CONNECT</button>\n      <button onClick={onCalibrate} disabled={!services?.magnetometerService}> CALIBRATE</button>\n      <div>\n        <pre className=\"Log\" ref={logRef} />\n      </div>\n      <canvas ref={canvasRef} width=\"800\" height=\"200\" />\n    </div >\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <div>\n      <App />\n      <App />\n      <App />\n      <App />\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}